pragma solidity ^0.4.18;

contract CowInfo {
   struct CowInfoContract {
       string cow_ID;
       uint dateTime;
       string BornIn;
       string Type ;
       uint Sex; 
       uint Weight;
       string FarmID;
   }
   mapping(uint => CowInfoContract) CowInfoChain;
   uint CowInfoCount=0;
   
      function AddNewContract( string _cow_ID,
       string _BornIn,
       string _Type,
       uint _Sex,
       uint _Weight,
       string _FarmID
      ) public returns(uint) {
       CowInfoContract memory newContract;
       newContract.cow_ID=_cow_ID;
       newContract.dateTime=now;
       newContract.BornIn=_BornIn;
       newContract.Type=_Type;
       newContract.Sex=_Sex;
       newContract.Weight=_Weight;
       newContract.FarmID=_FarmID;
       CowInfoChain[CowInfoCount] = newContract;
       CowInfoCount++;
       return(CowInfoCount);
   }
   
   function getTransacCount() public view returns (uint){
       return CowInfoCount;
   }
   

    
    function getCowByFarmID(string Id) public view returns(uint[]) {
        uint counter = 0;
        for (uint i = 0; i < CowInfoCount; i++) {
            if (stringsEqual(CowInfoChain[i].FarmID,Id))
           {
              counter++;
              
           }
        }
        uint[] memory v = new uint[](counter);
         uint counter1 = 0;
        for ( i = 0;i < CowInfoCount; i++) {
           if (stringsEqual(CowInfoChain[i].FarmID,Id))
           {
                v[counter1] = i;
                counter1++;
            }
        }

        return v;

    }
    function getCowInfoById(string Id) public view returns (string,uint,string,string,uint,uint,string) { //get last
       uint CowInfoIndex = 0;
       for (uint ci = 0; ci <= CowInfoCount; ci++) {
           if (stringsEqual(CowInfoChain[ci].cow_ID,Id))
           {
               CowInfoIndex = ci;
              
           }
       }
      return(CowInfoChain[CowInfoIndex].cow_ID,CowInfoChain[CowInfoIndex].dateTime,CowInfoChain[CowInfoIndex].BornIn,CowInfoChain[CowInfoIndex].Type,
       CowInfoChain[CowInfoIndex].Sex,CowInfoChain[CowInfoIndex].Weight,CowInfoChain[CowInfoIndex].FarmID);
     
   }
   
    function getInfoAt(uint Id) public view returns (string,uint,string,string,uint,uint,string) {
       uint CowInfoIndex = Id;
       
      return(CowInfoChain[CowInfoIndex].cow_ID,CowInfoChain[CowInfoIndex].dateTime,CowInfoChain[CowInfoIndex].BornIn,CowInfoChain[CowInfoIndex].Type,
       CowInfoChain[CowInfoIndex].Sex,CowInfoChain[CowInfoIndex].Weight,CowInfoChain[CowInfoIndex].FarmID);
     
   }
     
   function stringsEqual(string storage _a, string memory _b) internal view returns (bool) {
       bytes storage a = bytes(_a);
       bytes memory b = bytes(_b);
       if (a.length != b.length)
           return false;
       // @todo unroll this loop
       for (uint i = 0; i < a.length; i ++)
           if (a[i] != b[i])
               return false;
       return true;
   }
}
   
   