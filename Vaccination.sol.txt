pragma solidity ^0.4.18;

contract CowVaccin {
   struct CowVaccinContract {
       string cow_ID;
       uint dateTime;
       string VaccinT;
   }
   mapping(uint => CowVaccinContract) CowVaccinChain;
   uint CowVaccinCount=0;
   
      function AddNewContract( string _cow_ID,
         string _VaccinT) public returns(uint) {
       CowVaccinContract memory newContract;
       newContract.VaccinT = _VaccinT;
       newContract.cow_ID=_cow_ID;
       newContract.dateTime=now;
       CowVaccinChain[CowVaccinCount] = newContract;
       CowVaccinCount++;
       return(CowVaccinCount);
   }
   
   
   
    
    function getVaccinByCowId(string Id) public view returns(uint[]) {
        uint counter = 0;
        for (uint i = 0; i < CowVaccinCount; i++) {
            if (stringsEqual(CowVaccinChain[i].cow_ID,Id))
           {
              counter++;
              
           }
        }
        uint[] memory v = new uint[](counter);
         uint counter1 = 0;
        for ( i = 0;i < CowVaccinCount; i++) {
           if (stringsEqual(CowVaccinChain[i].cow_ID,Id))
           {
                v[counter1] = i;
                counter1++;
            }
        }

        return v;

    }
    
    function getCowByVaccinId(string Id) public view returns(uint[]) {
        uint counter = 0;
        for (uint i = 0; i < CowVaccinCount; i++) {
            if (stringsEqual(CowVaccinChain[i].VaccinT,Id))
           {
              counter++;
              
           }
        }
        uint[] memory v = new uint[](counter);
         uint counter1 = 0;
        for ( i = 0;i < CowVaccinCount; i++) {
           if (stringsEqual(CowVaccinChain[i].VaccinT,Id))
           {
                v[counter1] = i;
                counter1++;
            }
        }

        return v;

    }
    function getCowVaccinById(string Id) public view returns (string,uint,string) {  //get last
       uint CowVaccinIndex = 0;
       for (uint ci = 0; ci <= CowVaccinCount; ci++) {
           if (stringsEqual(CowVaccinChain[ci].cow_ID,Id))
           {
               CowVaccinIndex = ci;
             
           }
       }
       
       
      return(CowVaccinChain[CowVaccinIndex].cow_ID,CowVaccinChain[CowVaccinIndex].dateTime,
       CowVaccinChain[CowVaccinIndex].VaccinT);
     
   }
   
   function getInfoAt(uint Index) public view returns (string,uint,string) {
       uint CowVaccinIndex = Index;
     
       
      return(CowVaccinChain[CowVaccinIndex].cow_ID,CowVaccinChain[CowVaccinIndex].dateTime,
       CowVaccinChain[CowVaccinIndex].VaccinT);
     
   }
     
   function stringsEqual(string storage _a, string memory _b) internal view returns (bool) {
       bytes storage a = bytes(_a);
       bytes memory b = bytes(_b);
       if (a.length != b.length)
           return false;
       // @todo unroll this loop
       for (uint i = 0; i < a.length; i ++)
           if (a[i] != b[i])
               return false;
       return true;
   }
}
   
   